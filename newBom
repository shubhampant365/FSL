import { LightningElement, api, track } from 'lwc';
import getBOMs from '@salesforce/apex/BOMRequestController.getBOMs';
import createProductConsumedRecords from '@salesforce/apex/BOMRequestController.createProductConsumedRecords';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import refreshApi from '@salesforce/apex/YourRefreshApi.refreshApi'; // Assuming there's an Apex method for refreshing

export default class BomRequest extends LightningElement {
    @api recordId;
    @track boms = [];
    @track filteredBoms = [];
    @track paginatedData = [];
    @track searchKey = '';
    @track currentPage = 1;
    @track pageSize = 10;
    @track isLoading = false;
    error;

    // Lifecycle hook to fetch BOMs when the component is connected
    connectedCallback() {
        this.fetchBOMs();
    }

    // Fetch BOM data from the server
    fetchBOMs() {
        this.isLoading = true;
        getBOMs({ workOrderLineItemId: this.recordId })
            .then(data => {
                this.boms = data.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
                this.isLoading = false;
            })
            .catch(error => {
                this.error = error.body.message;
                this.isLoading = false;
            });
    }

    // Handle search input change
    handleSearch(event) {
        this.searchKey = event.target.value;
        this.updatePaginatedData();
    }

    // Update paginated data based on current page and page size
    updatePaginatedData() {
        const start = (this.currentPage - 1) * this.pageSize;
        const end = start + this.pageSize;
        this.paginatedData = this.filteredData.slice(start, end);
    }

    // Determine if the previous button should be disabled
    get disablePrevious() {
        return this.currentPage === 1;
    }

    // Determine if the next button should be disabled
    get disableNext() {
        return this.currentPage * this.pageSize >= this.filteredData.length;
    }

    // Filter data based on the search key
    get filteredData() {
        if (this.searchKey) {
            return this.boms.filter(bom =>
                bom.productName.toLowerCase().includes(this.searchKey.toLowerCase())
            );
        }
        return this.boms;
    }

    // Handle previous page button click
    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginatedData();
        }
    }

    // Handle next page button click
    handleNext() {
        if (this.currentPage * this.pageSize < this.filteredData.length) {
            this.currentPage++;
            this.updatePaginatedData();
        }
    }

    // Handle change in the consume quantity input
    handleRequestConsumeChange(event) {
        const id = event.target.dataset.id;
        const value = event.target.value;
        this.filteredBoms = this.filteredBoms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.boms = this.boms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.updatePaginatedData();
    }

    // Handle save button click
    handleSave() {
        let isValid = true;
        let invalidItems = [];

        this.boms.forEach(bom => {
            if (parseInt(bom.requestConsume) > bom.quantity) {
                isValid = false;
                invalidItems.push(bom.productName);
            }
        });

        if (!isValid) {
            const invalidItemsStr = invalidItems.join(', ');
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: `Requested quantity exceeds available quantity for: ${invalidItemsStr}`,
                    variant: 'error'
                })
            );
            return;
        }

        const bomsToSave = this.boms
            .filter(bom => bom.requestConsume > 0)
            .map(bom => ({
                id: bom.id,
                productItemId: bom.productItemId,
                requestConsume: bom.requestConsume,
                workOrderId: bom.workOrderId
            }));

        const payload = JSON.stringify(bomsToSave);
        this.createProductConsumedRecords(payload);
    }

    // Call the server to create Product Consumed records
    createProductConsumedRecords(payload) {
        createProductConsumedRecords({ payload, workOrderLineItemId: this.recordId })
            .then(() => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Product Consumed records created successfully',
                        variant: 'success'
                    })
                );
                this.fetchBOMs(); // Refresh BOMs after save
            })
            .catch(error => {
                this.error = error.body.message;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error',
                        message: 'An error occurred while creating Product Consumed records: ' + error.body.message,
                        variant: 'error'
                    })
                );
            });
    }

    // Handle refresh button click to call the refresh API and refresh the table
    handleRefresh() {
        this.isLoading = true;
        refreshApi({ workOrderLineItemId: this.recordId })
            .then(() => {
                this.fetchBOMs();
                this.isLoading = false;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Inventory refreshed successfully',
                        variant: 'success'
                    })
                );
            })
            .catch(error => {
                this.error = error.body.message;
                this.isLoading = false;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error',
                        message: 'An error occurred while refreshing the inventory: ' + error.body.message,
                        variant: 'error'
                    })
                );
            });
    }
}



<template>
    <lightning-card title="Bill of Materials" icon-name="standard:product_item">
        <div class="slds-p-horizontal_medium slds-p-around_medium">
            <lightning-input type="search" label="Search by Product Name" value={searchKey} onchange={handleSearch}></lightning-input>
        </div>
        <template if:true={isLoading}>
            <lightning-spinner alternative-text="Loading"></lightning-spinner>
        </template>
        <template if:true={paginatedData.length}>
            <div style="overflow-x: auto;">
                <table class="slds-table slds-table_bordered slds-table_cell-buffer slds-table_resizable-cols slds-table_col-bordered">
                    <thead>
                        <tr class="slds-line-height_reset">
                            <th scope="col">
                                <div class="slds-truncate" title="Product Name">Product Name</div>
                            </th>
                            <th scope="col">
                                <div class="slds-truncate" title="Description">Description</div>
                            </th>
                            <th scope="col">
                                <div class="slds-truncate" title="Item Code">Item Code</div>
                            </th>
                            <th scope="col">
                                <div class="slds-truncate" title="Quantity">Quantity</div>
                            </th>
                            <th scope="col">
                                <div class="slds-truncate" title="Quantity In Hand">Quantity In Hand</div>
                            </th>
                            <th scope="col">
                                <div class="slds-truncate" title="Consume">Consume</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <template for:each={paginatedData} for:item="bom">
                            <tr key={bom.id} class="slds-hint-parent">
                                <td>
                                    <div style="word-wrap: break-word; white-space: normal; max-width: 200px;" title={bom.productName}>{bom.productName}</div>
                                </td>
                                <td>
                                    <div class="slds-truncate" title={bom.productDescription}>{bom.productDescription}</div>
                                </td>
                                <td>
                                    <div class="slds-truncate" title={bom.itemCode}>{bom.itemCode}</div>
                                </td>
                                <td>
                                    <div class="slds-truncate" title={bom.quantity}>{bom.quantity}</div>
                                </td>
                                <td>
                                    <div class="slds-truncate" title={bom.quantityOnHand}>{bom.quantityOnHand}</div>
                                </td>
                                <td>
                                    <lightning-input type="number" value={bom.requestConsume} data-id={bom.id} onchange={handleRequestConsumeChange}></lightning-input>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>
            <div class="slds-m-top_medium slds-grid slds-grid_align-spread">
                <lightning-button label="Previous" onclick={handlePrevious} disabled={disablePrevious}></lightning-button>
                <lightning-button label="Next" onclick={handleNext} disabled={disableNext}></lightning-button>
            </div>
            <div class="slds-m-top_medium slds-p-around_medium">
                <lightning-button label="Save" onclick={handleSave}></lightning-button>
                <lightning-button label="Refresh" onclick={handleRefresh}></lightning-button>
            </div>
        </template>
        <template if:true={error}>
            <div class="slds-text-color_error">
                <p>{error}</p>
            </div>
        </template>
    </lightning-card>
</template>
