<template>
    <lightning-card title="Bill of Materials" icon-name="standard:product_item">
        <div class="slds-p-horizontal_medium slds-p-around_medium">
            <lightning-input type="search" label="Search by Product Name" value={searchKey} onchange={handleSearch}></lightning-input>
        </div>
        <template if:true={isLoading}>
            <lightning-spinner alternative-text="Loading"></lightning-spinner>
        </template>
        <template if:true={filteredBoms.length}>
            <table class="slds-table slds-table_bordered slds-table_cell-buffer">
                <thead>
                    <tr>
                        <th scope="col">
                            <div class="slds-truncate" title="Product Name">Product Name</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Quantity">Quantity</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Request/Consume">Request/Consume</div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <template for:each={filteredBoms} for:item="bom">
                        <tr key={bom.id}>
                            <td>
                                <div class="slds-truncate" title={bom.productName}>{bom.productName}</div>
                            </td>
                            <td>
                                <div class="slds-truncate" title={bom.quantity}>{bom.quantity}</div>
                            </td>
                            <td>
                                <lightning-input type="number" value={bom.requestConsume} data-id={bom.id} onchange={handleRequestConsumeChange}></lightning-input>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </template>
        <template if:true={boms.error}>
            <div class="slds-text-color_error">
                <p>{boms.error}</p>
            </div>
        </template>
    </lightning-card>
</template>


import { LightningElement, api, track } from 'lwc';
import getBOMs from '@salesforce/apex/BOMRequestController.getBOMs';

export default class BomRequest extends LightningElement {
    @api recordId;
    @track boms = [];
    @track filteredBoms = [];
    @track searchKey = '';
    @track isLoading = true;
    error;

    connectedCallback() {
        this.fetchBOMs();
    }

    fetchBOMs() {
        this.isLoading = true;
        getBOMs({ workOrderLineItemId: this.recordId })
            .then(data => {
                console.log('Data from Apex:', JSON.stringify(data)); // Debug log to check data
                this.boms = data.map(bom => ({ ...bom, requestConsume: 0 }));
                this.filteredBoms = [...this.boms];
                this.isLoading = false;
            })
            .catch(error => {
                this.error = error;
                console.error('Error from Apex:', error); // Debug log for error
                this.isLoading = false;
            });
    }

    handleSearch(event) {
        const searchTerm = event.target.value.toLowerCase();
        if (searchTerm) {
            this.filteredBoms = this.boms.filter(bom =>
                bom.productName.toLowerCase().includes(searchTerm)
            );
        } else {
            this.filteredBoms = [...this.boms];
        }
    }

    handleRequestConsumeChange(event) {
        const id = event.target.dataset.id;
        const value = event.target.value;
        this.filteredBoms = this.filteredBoms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.boms = this.boms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });
    }
}
