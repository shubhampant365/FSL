import { LightningElement, api, track } from 'lwc';
import getBOMs from '@salesforce/apex/BOMRequestController.getBOMs';
import createProductConsumedRecords from '@salesforce/apex/BOMRequestController.createProductConsumedRecords';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class BomRequest extends LightningElement {
    @api recordId;
    @track boms = [];
    @track filteredBoms = [];
    @track paginatedData = [];
    @track searchKey = '';
    @track currentPage = 1;
    @track pageSize = 10;
    @track isLoading = false;
    @track selectedOption = '';
    @track showTable = false;
    error;

    options = [
        { label: 'Consume', value: 'Consume' },
        { label: 'Request', value: 'Request' }
    ];

    get shouldShowRadio() {
        return !this.showTable;
    }

    get columnLabel() {
        return this.selectedOption;
    }

    connectedCallback() {
        this.fetchBOMs();
    }

    fetchBOMs() {
        this.isLoading = true;
        getBOMs({ workOrderLineItemId: this.recordId })
            .then(data => {
                console.log('Data from Apex:', JSON.stringify(data)); // Debug log to check data
                this.boms = data.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
                this.isLoading = false;
            })
            .catch(error => {
                this.error = error;
                console.error('Error from Apex:', error); // Debug log for error
                this.isLoading = false;
            });
    }

    handleOptionChange(event) {
        this.selectedOption = event.target.value;
        this.showTable = true;
        this.updatePaginatedData();
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.updatePaginatedData();
    }

    updatePaginatedData() {
        const start = (this.currentPage - 1) * this.pageSize;
        const end = start + this.pageSize;
        this.paginatedData = this.filteredData.slice(start, end);
    }

    get disablePrevious() {
        return this.currentPage === 1;
    }

    get disableNext() {
        return this.currentPage * this.pageSize >= this.filteredData.length;
    }

    get filteredData() {
        if (this.searchKey) {
            return this.boms.filter(bom =>
                bom.productName.toLowerCase().includes(this.searchKey.toLowerCase())
            );
        }
        return this.boms;
    }

    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginatedData();
        }
    }

    handleNext() {
        if (this.currentPage * this.pageSize < this.filteredData.length) {
            this.currentPage++;
            this.updatePaginatedData();
        }
    }

    handleRequestConsumeChange(event) {
        const id = event.target.dataset.id;
        const value = event.target.value;
        this.filteredBoms = this.filteredBoms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.boms = this.boms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.updatePaginatedData();
    }

    handleSave() {
        const bomsToSave = this.boms
            .filter(bom => bom.requestConsume > 0)
            .map(bom => ({
                id: bom.id,
                productItemId: bom.productItemId,
                requestConsume: bom.requestConsume
            }));

        console.log('BOMs to save:', JSON.stringify(bomsToSave)); // Debug log to check save data

        this.createProductConsumedRecords(bomsToSave);
    }

    createProductConsumedRecords(bomsToSave) {
        createProductConsumedRecords({ bomWrappers: bomsToSave, workOrderLineItemId: this.recordId })
            .then(() => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Product Consumed records created successfully',
                        variant: 'success'
                    })
                );
                // Reset the input values after successful save
                this.boms = this.boms.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
            })
            .catch(error => {
                this.error = error;
                console.error('Error while saving Product Consumed records:', error); // Debug log for error
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error',
                        message: 'An error occurred while creating Product Consumed records: ' + error.body.message,
                        variant: 'error'
                    })
                );
            });
    }
}
