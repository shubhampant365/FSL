<template>
    <lightning-card title="Bill of Materials">
        <div class="slds-p-horizontal_medium">
            <lightning-input type="search" label="Search" value={searchKey} onchange={handleSearch}></lightning-input>
        </div>
        <template if:true={boms.data}>
            <lightning-datatable
                key-field="id"
                data={paginatedData}
                columns={columns}
                hide-checkbox-column="true">
            </lightning-datatable>
            <div class="slds-m-top_medium slds-grid slds-grid_align-spread">
                <lightning-button label="Previous" onclick={handlePrevious} disabled={disablePrevious}></lightning-button>
                <lightning-button label="Next" onclick={handleNext} disabled={disableNext}></lightning-button>
            </div>
        </template>
        <template if:true={boms.error}>
            <p class="slds-text-color_error">{boms.error}</p>
        </template>
    </lightning-card>
</template>


import { LightningElement, api, wire, track } from 'lwc';
import getBOMs from '@salesforce/apex/BOMRequestController.getBOMs';

const COLUMNS = [
    { label: 'Product Name', fieldName: 'productName' },
    { label: 'Quantity', fieldName: 'quantity', type: 'number' },
    { label: 'Request/Consume', type: 'input', fieldName: 'requestConsume' }
];

export default class BomRequest extends LightningElement {
    @api recordId;
    @track boms = { data: [], error: null };
    @track paginatedData = [];
    @track searchKey = '';
    @track currentPage = 1;
    @track pageSize = 10;

    columns = COLUMNS;

    @wire(getBOMs, { workOrderLineItemId: '$recordId' })
    wiredBOMs({ error, data }) {
        if (data) {
            this.boms.data = data;
            this.updatePaginatedData();
        } else if (error) {
            this.boms.error = error;
        }
    }

    get disablePrevious() {
        return this.currentPage === 1;
    }

    get disableNext() {
        return this.currentPage * this.pageSize >= this.filteredData.length;
    }

    get filteredData() {
        if (this.searchKey) {
            return this.boms.data.filter(bom =>
                bom.productName.toLowerCase().includes(this.searchKey.toLowerCase())
            );
        }
        return this.boms.data;
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.updatePaginatedData();
    }

    updatePaginatedData() {
        const start = (this.currentPage - 1) * this.pageSize;
        const end = start + this.pageSize;
        this.paginatedData = this.filteredData.slice(start, end);
    }

    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginatedData();
        }
    }

    handleNext() {
        if (this.currentPage * this.pageSize < this.filteredData.length) {
            this.currentPage++;
            this.updatePaginatedData();
        }
    }
}
