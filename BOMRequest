import { LightningElement, api, track } from 'lwc';
import getBOMs from '@salesforce/apex/BOMRequestController.getBOMs';
import createProductConsumedRecords from '@salesforce/apex/BOMRequestController.createProductConsumedRecords';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class BomRequest extends LightningElement {
    @api recordId;
    @track boms = [];
    @track filteredBoms = [];
    @track paginatedData = [];
    @track searchKey = '';
    @track currentPage = 1;
    @track pageSize = 10;
    @track isLoading = false;
    @track selectedOption = '';
    @track showTable = false;
    error;

    options = [
        { label: 'Consume', value: 'Consume' },
        { label: 'Request', value: 'Request' }
    ];

    get shouldShowRadio() {
        return !this.showTable;
    }

    get columnLabel() {
        return this.selectedOption;
    }

    connectedCallback() {
        this.fetchBOMs();
    }

    fetchBOMs() {
        this.isLoading = true;
        getBOMs({ workOrderLineItemId: this.recordId })
            .then(data => {
                console.log('Data from Apex:', JSON.stringify(data)); // Debug log to check data
                this.boms = data.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
                this.isLoading = false;
            })
            .catch(error => {
                this.error = error;
                console.error('Error from Apex:', error); // Debug log for error
                this.isLoading = false;
            });
    }

    handleOptionChange(event) {
        this.selectedOption = event.target.value;
        this.showTable = true;
        this.updatePaginatedData();
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.updatePaginatedData();
    }

    updatePaginatedData() {
        const start = (this.currentPage - 1) * this.pageSize;
        const end = start + this.pageSize;
        this.paginatedData = this.filteredData.slice(start, end);
    }

    get disablePrevious() {
        return this.currentPage === 1;
    }

    get disableNext() {
        return this.currentPage * this.pageSize >= this.filteredData.length;
    }

    get filteredData() {
        if (this.searchKey) {
            return this.boms.filter(bom =>
                bom.productName.toLowerCase().includes(this.searchKey.toLowerCase())
            );
        }
        return this.boms;
    }

    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginatedData();
        }
    }

    handleNext() {
        if (this.currentPage * this.pageSize < this.filteredData.length) {
            this.currentPage++;
            this.updatePaginatedData();
        }
    }

    handleRequestConsumeChange(event) {
        const id = event.target.dataset.id;
        const value = event.target.value;
        this.filteredBoms = this.filteredBoms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.boms = this.boms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.updatePaginatedData();
    }

    handleSave() {
        const bomsToSave = this.boms
            .filter(bom => bom.requestConsume > 0)
            .map(bom => ({
                id: bom.id,
                productItemId: bom.productItemId,
                requestConsume: bom.requestConsume
            }));

        console.log('BOMs to save:', JSON.stringify(bomsToSave)); // Debug log to check save data

        if (this.selectedOption === 'Consume') {
            this.createProductConsumedRecords(bomsToSave);
        } else {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Data saved successfully',
                    variant: 'success'
                })
            );
        }
    }

    createProductConsumedRecords(bomsToSave) {
        createProductConsumedRecords({ bomWrappers: bomsToSave, workOrderLineItemId: this.recordId })
            .then(() => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Product Consumed records created successfully',
                        variant: 'success'
                    })
                );
                this.boms = this.boms.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
            })
            .catch(error => {
                this.error = error;
                console.error('Error while saving Product Consumed records:', error); // Debug log for error
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error',
                        message: 'An error occurred while creating Product Consumed records',
                        variant: 'error'
                    })
                );
            });
    }
}


public with sharing class BOMRequestController {
    @AuraEnabled(cacheable=true)
    public static List<BOMWrapper> getBOMs(Id workOrderLineItemId) {
        Id currentUserId = UserInfo.getUserId();

        List<ServiceResource> serviceResources = [
            SELECT LocationId, RelatedRecordId 
            FROM ServiceResource 
            WHERE RelatedRecordId = :currentUserId
        ];

        if (serviceResources.isEmpty()) {
            return new List<BOMWrapper>();
        }

        Id locationId = serviceResources[0].LocationId;

        WorkOrderLineItem woli = [
            SELECT Asset.Product2Id, Quantity__c 
            FROM WorkOrderLineItem 
            WHERE Id = :workOrderLineItemId
            LIMIT 1
        ];

        Decimal workOrderQuantity = (woli.Quantity__c == null) ? 1 : woli.Quantity__c;

        List<ProductItem> productItems = [
            SELECT Id, Product2Id, QuantityOnHand
            FROM ProductItem 
            WHERE LocationId = :locationId
        ];

        Map<Id, ProductItem> productItemMap = new Map<Id, ProductItem>();
        for (ProductItem productItem : productItems) {
            productItemMap.put(productItem.Product2Id, productItem);
        }

        List<BOM__c> boms = [
            SELECT Id, Name, Product_Code__c, Product_Code__r.Name, Quantity__c 
            FROM BOM__c 
            WHERE RecordType.DeveloperName = 'Bill_Of_Material' 
              AND FG_Product_Code__c = :woli.Asset.Product2Id
              AND Product_Code__c IN :productItemMap.keySet()
        ];

        List<BOMWrapper> wrappedBOMs = new List<BOMWrapper>();
        for (BOM__c bom : boms) {
            ProductItem productItem = productItemMap.get(bom.Product_Code__c);
            wrappedBOMs.add(new BOMWrapper(bom, workOrderQuantity, productItem.Id, productItem.QuantityOnHand));
        }

        System.debug('Wrapped BOMs: ' + wrappedBOMs); // Debug log to check wrapped BOMs

        return wrappedBOMs;
    }

    @AuraEnabled
    public static void createProductConsumedRecords(List<BOMWrapper> bomWrappers, Id workOrderLineItemId) {
        List<ProductConsumed> productConsumedRecords = new List<ProductConsumed>();
        for (BOMWrapper bomWrapper : bomWrappers) {
            if (bomWrapper.requestConsume > 0) {
                ProductConsumed productConsumed = new ProductConsumed();
                productConsumed.ProductItemId = bomWrapper.productItemId;
                productConsumed.QuantityConsumed = bomWrapper.requestConsume;
                productConsumed.WorkOrderLineItemId = workOrderLineItemId;
                productConsumedRecords.add(productConsumed);
            }
        }

        System.debug('Product Consumed Records to Insert: ' + productConsumedRecords); // Debug log to check records to insert

        if (!productConsumedRecords.isEmpty()) {
            insert productConsumedRecords;
        }
    }

    public class BOMWrapper {
        @AuraEnabled public String id { get; set; }
        @AuraEnabled public String productName { get; set; }
        @AuraEnabled public String productItemId { get; set; }
        @AuraEnabled public Decimal quantity { get; set; }
        @AuraEnabled public Decimal requestConsume { get; set; }
        @AuraEnabled public Decimal quantityOnHand { get; set; }

        public BOMWrapper(BOM__c bom, Decimal workOrderQuantity, Id productItemId, Decimal quantityOnHand) {
            this.id = bom.Id;
            this.productName = bom.Product_Code__r.Name;
            this.productItemId = productItemId;
            this.quantity = bom.Quantity__c * workOrderQuantity;
            this.requestConsume = 0;
            this.quantityOnHand = quantityOnHand;
        }
    }
}
