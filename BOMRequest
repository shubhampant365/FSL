import { LightningElement, api, track } from 'lwc';
import getBOMs from '@salesforce/apex/BOMRequestController.getBOMs';
import createProductConsumedRecords from '@salesforce/apex/BOMRequestController.createProductConsumedRecords';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class BomRequest extends LightningElement {
    @api recordId;
    @track boms = [];
    @track filteredBoms = [];
    @track paginatedData = [];
    @track searchKey = '';
    @track currentPage = 1;
    @track pageSize = 10;
    @track isLoading = false;
    @track showTable = true;
    error;

    connectedCallback() {
        this.fetchBOMs();
    }

    fetchBOMs() {
        this.isLoading = true;
        getBOMs({ workOrderLineItemId: this.recordId })
            .then(data => {
                console.log('Data from Apex:', JSON.stringify(data)); // Debug log to check data
                this.boms = data.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
                this.isLoading = false;
            })
            .catch(error => {
                this.error = error;
                console.error('Error from Apex:', error); // Debug log for error
                this.isLoading = false;
            });
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.updatePaginatedData();
    }

    updatePaginatedData() {
        const start = (this.currentPage - 1) * this.pageSize;
        const end = start + this.pageSize;
        this.paginatedData = this.filteredData.slice(start, end);
    }

    get disablePrevious() {
        return this.currentPage === 1;
    }

    get disableNext() {
        return this.currentPage * this.pageSize >= this.filteredData.length;
    }

    get filteredData() {
        if (this.searchKey) {
            return this.boms.filter(bom =>
                bom.productName.toLowerCase().includes(this.searchKey.toLowerCase())
            );
        }
        return this.boms;
    }

    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePaginatedData();
        }
    }

    handleNext() {
        if (this.currentPage * this.pageSize < this.filteredData.length) {
            this.currentPage++;
            this.updatePaginatedData();
        }
    }

    handleRequestConsumeChange(event) {
        const id = event.target.dataset.id;
        const value = event.target.value;
        this.filteredBoms = this.filteredBoms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.boms = this.boms.map(bom => {
            if (bom.id === id) {
                return { ...bom, requestConsume: value };
            }
            return bom;
        });

        this.updatePaginatedData();
    }

    handleSave() {
        const bomsToSave = this.boms
            .filter(bom => bom.requestConsume > 0)
            .map(bom => ({
                id: bom.id,
                productItemId: bom.productItemId,
                requestConsume: bom.requestConsume
            }));

        console.log('BOMs to save:', JSON.stringify(bomsToSave)); // Debug log to check save data

        const payload = JSON.stringify(bomsToSave);
        this.createProductConsumedRecords(payload);
    }

    createProductConsumedRecords(payload) {
        createProductConsumedRecords({ payload, workOrderLineItemId: this.recordId })
            .then(() => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Product Consumed records created successfully',
                        variant: 'success'
                    })
                );
                // Reset the input values after successful save
                this.boms = this.boms.map(bom => ({ ...bom, requestConsume: '' }));
                this.filteredBoms = [...this.boms];
                this.updatePaginatedData();
            })
            .catch(error => {
                this.error = error;
                console.error('Error while saving Product Consumed records:', error); // Debug log for error
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error',
                        message: 'An error occurred while creating Product Consumed records: ' + error.body.message,
                        variant: 'error'
                    })
                );
            });
    }
}



<template>
    <lightning-card title="Bill of Materials" icon-name="standard:product_item">
        <div class="slds-p-horizontal_medium slds-p-around_medium">
            <lightning-input type="search" label="Search by Product Name" value={searchKey} onchange={handleSearch}></lightning-input>
        </div>
        <template if:true={isLoading}>
            <lightning-spinner alternative-text="Loading"></lightning-spinner>
        </template>
        <template if:true={paginatedData.length}>
            <table class="slds-table slds-table_bordered slds-table_cell-buffer">
                <thead>
                    <tr>
                        <th scope="col">
                            <div class="slds-truncate" title="Product Name">Product Name</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Quantity">Quantity</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Quantity In Hand">Quantity In Hand</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Consume">Consume</div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <template for:each={paginatedData} for:item="bom">
                        <tr key={bom.id}>
                            <td>
                                <div class="slds-truncate" title={bom.productName}>{bom.productName}</div>
                            </td>
                            <td>
                                <div class="slds-truncate" title={bom.quantity}>{bom.quantity}</div>
                            </td>
                            <td>
                                <div class="slds-truncate" title={bom.quantityOnHand}>{bom.quantityOnHand}</div>
                            </td>
                            <td>
                                <lightning-input type="number" value={bom.requestConsume} data-id={bom.id} onchange={handleRequestConsumeChange}></lightning-input>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
            <div class="slds-m-top_medium slds-grid slds-grid_align-spread">
                <lightning-button label="Previous" onclick={handlePrevious} disabled={disablePrevious}></lightning-button>
                <lightning-button label="Next" onclick={handleNext} disabled={disableNext}></lightning-button>
            </div>
            <div class="slds-m-top_medium slds-p-around_medium">
                <lightning-button label="Save" onclick={handleSave}></lightning-button>
            </div>
        </template>
        <template if:true={boms.error}>
            <div class="slds-text-color_error">
                <p>{boms.error}</p>
            </div>
        </template>
    </lightning-card>
</template>
