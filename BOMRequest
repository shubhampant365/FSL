<template>
    <lightning-card title="Product Lookup" icon-name="standard:product_item">
        <lightning-input type="text" label="Search Product" value={searchKey} onchange={handleSearchChange}></lightning-input>
        <template if:true={searchResults}>
            <lightning-datatable
                key-field="Id"
                data={searchResults}
                columns={columns}
                onrowaction={handleRowAction}>
            </lightning-datatable>
        </template>
        <template if:true={selectedProduct}>
            <p>Selected Product: {selectedProduct.Name}</p>
            <p>Quantity: {selectedProduct.Quantity__c}</p>
            <p>FG Product Code: {selectedProduct.FG_Product_Code__c}</p>
        </template>
        <template if:true={error}>
            <p class="slds-text-color_error">{error}</p>
        </template>
    </lightning-card>
</template>



import { LightningElement, track, wire } from 'lwc';
import searchProducts from '@salesforce/apex/BOMRequestController.searchProducts';

export default class BomLookup extends LightningElement {
    @track searchKey = '';
    @track searchResults;
    @track error;
    @track selectedProduct;

    columns = [
        { label: 'Product Code', fieldName: 'Name' },
        { label: 'Quantity', fieldName: 'Quantity__c' },
        { label: 'FG Product Code', fieldName: 'FG_Product_Code__c' },
        {
            type: 'button',
            typeAttributes: {
                label: 'Select',
                name: 'select'
            }
        }
    ];

    handleSearchChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 2) {
            searchProducts({ searchKey: this.searchKey })
                .then(result => {
                    this.searchResults = result;
                    this.error = undefined;
                })
                .catch(error => {
                    this.error = error;
                    this.searchResults = undefined;
                });
        } else {
            this.searchResults = undefined;
        }
    }

    handleRowAction(event) {
        const productId = event.detail.row.Id;
        this.selectedProduct = this.searchResults.find(product => product.Id === productId);
    }
}
