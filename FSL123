import { LightningElement, track, api } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import makeMockApiCall from '@salesforce/apex/AssetOnboardingController.makeMockApiCall';
import isSerialIdLinked from '@salesforce/apex/AssetOnboardingController.isSerialIdLinked';
import uploadFile from '@salesforce/apex/AssetOnboardingController.saveAttachment';
import transferAsset from '@salesforce/apex/AssetOnboardingController.transfertAnAsset';
import getProductDetailsBasedOnId from '@salesforce/apex/AssetOnboardingController.getProductDetails';
import getProductDetailsBySerialNumber from '@salesforce/apex/AssetOnboardingController.getProductDetailsBySerialNumber';
import updateAssetDetailsWithWorkOrder from '@salesforce/apex/AssetOnboardingController.updateAssetDetailsWithWorkOrder';
import { getBarcodeScanner } from 'lightning/mobileCapabilities';

export default class AssetOnboarding extends LightningElement {
    @track itemCode = '';
    @track serialCode = '';
    @track iduSerialNumber = '';
    @track oduSerialNumber = '';
    @track isSerialIdLinkedResult = false;
    @track isItemCodeDisabled = false;
    @track isSerialCodeDisabled = false;
    @track isLoading = false;
    @track showProductDetails = false;
    @track showErrorScreen = false;
    @track productDetails = {};
    @track dateOfPurchase;
    @track dateOfInstallation;
    @track salesProductCode;
    @track invoiceNumber;
    @track warrantyStartDate;
    @track warrantyEndDate;
    @track sourceOfPurchase;
    @track remarks;
    @track rentalAsset = false;

    barcodeScanner;
    productId;

    @api businessUnit;
    @api recordId;

    connectedCallback() {
        this.barcodeScanner = getBarcodeScanner();
    }

    get isBusinessUnitH() {
        return this.businessUnit === 'H';
    }

    handleInputChange(event) {
        const field = event.target.dataset.id;
        this[field] = event.target.value;
    }

    handleCheckboxChange(event) {
        this.rentalAsset = event.target.checked;
    }

    handleFileUpload(event) {
        const file = event.target.files[0];
        const reader = new FileReader();

        reader.onload = () => {
            this.fileData = {
                fileName: file.name,
                base64Data: reader.result.split(',')[1]
            };
            this.handleSaveDocument();
        };

        reader.readAsDataURL(file);
    }

    handleSaveDocument() {
        if (!this.fileData) {
            return;
        }
        this.isLoading = true;
        uploadFile({ parentId: this.recordId, fileName: this.fileData.fileName, base64Data: this.fileData.base64Data })
            .then(() => this.showSuccessToast('Document uploaded successfully'))
            .catch(error => this.showToast('Error', error.body.message, 'error'))
            .finally(() => this.isLoading = false);
    }

    handleScanItemCode() {
        this.scanCode('itemCode');
    }

    handleScanSerialCode() {
        this.scanCode('serialCode');
    }

    handleScanIduSerialNumber() {
        this.scanCode('iduSerialNumber');
    }

    handleScanOduSerialNumber() {
        this.scanCode('oduSerialNumber');
    }

    scanCode(field) {
        if (this.barcodeScanner.isAvailable()) {
            const scanningOptions = {
                barcodeTypes: ["code128", "code39", "code93", "ean13", "ean8", "upca", "upce", "qr", "datamatrix", "itf", "pdf417"],
                instructionText: "Position barcode in the scanner view.\nPress x to stop.",
                successText: "Successful Scan!"
            };
            this.barcodeScanner.scan(scanningOptions)
                .then(results => {
                    this[field] = results[0].value;
                    this[`is${field.charAt(0).toUpperCase() + field.slice(1)}Disabled`] = true;
                    this.template.querySelector(`lightning-input[data-id="${field}"]`).value = this[field];
                })
                .catch(error => this.showToast('Error', error.body.message, 'error'))
                .finally(() => this.barcodeScanner.dismiss());
        } else {
            this.showToast('Error', 'Barcode scanner is not available', 'error');
        }
    }

    handleSubmit() {
        if (!this.serialCode) {
            this.showToast('Warning', 'Please enter a value in the serial code input field.', 'warning');
            return;
        }

        this.isLoading = true;
        isSerialIdLinked({ serialId: this.serialCode })
            .then(result => {
                this.isSerialIdLinkedResult = result.isLinked;
                if (result.isLinked) {
                    this.showToast('Warning', 'The scanned serial ID is already linked with an existing asset.', 'warning');
                } else {
                    this.makeCallout();
                }
            })
            .catch(error => this.showToast('Error', error.body.message, 'error'))
            .finally(() => this.isLoading = false);
    }

    handleSubmitForH() {
        if (!this.serialCode || !this.iduSerialNumber || !this.oduSerialNumber) {
            this.showToast('Warning', 'Please enter all required serial numbers.', 'warning');
            return;
        }

        this.isLoading = true;
        isSerialIdLinked({ serialId: this.serialCode })
            .then(result => {
                if (result.isLinked) {
                    this.showToast('Warning', 'The scanned serial ID is already linked with an existing asset.', 'warning');
                } else {
                    this.getProductDetailsForH();
                }
            })
            .catch(error => this.showToast('Error', error.body.message, 'error'))
            .finally(() => this.isLoading = false);
    }

    getProductDetailsForH() {
        getProductDetailsBySerialNumber({ serialNumber: this.serialCode })
            .then(result => {
                if (result.error) {
                    this.showToast('Error', result.error, 'error');
                    this.showErrorScreen = true;
                } else {
                    this.productDetails = result.productDetails;
                    this.productId = result.productDetails.Id;
                    this.showProductDetails = true;
                }
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
                this.showErrorScreen = true;
            })
            .finally(() => this.isLoading = false);
    }

    handleGoBack() {
        this.showErrorScreen = false;
        this.showProductDetails = false;
    }

    makeCallout() {
        makeMockApiCall({ qrCodes: [this.itemCode], recordId: this.recordId })
            .then(result => {
                const parsedResult = JSON.parse(result);
                if (parsedResult && parsedResult.LstProductDetailsApiList && parsedResult.LstProductDetailsApiList.length > 0) {
                    const qrCodeResponse = parsedResult.LstProductDetailsApiList[0];
                    if (qrCodeResponse.Status === 'INVALID') {
                        this.showToast('Error', qrCodeResponse.ResponseMessage, 'error');
                    } else {
                        this.fetchProductDetails(qrCodeResponse.ProductCode);
                    }
                } else {
                    this.showToast('Error', 'No product details found in the response', 'error');
                }
            })
            .catch(error => this.showToast('Error', error.body.message, 'error'))
            .finally(() => this.isLoading = false);
    }

    fetchProductDetails(productCode) {
        getProductDetailsBasedOnId({ productCode })
            .then(result => {
                this.productDetails = result;
                this.productId = result.Id;
                this.showProductDetails = true;
            })
            .catch(error => this.showToast('Error', error.body.message, 'error'));
    }

    handleSave() {
        this.isLoading = true;
        updateAssetDetailsWithWorkOrder({
            workOrderLineItemId: this.recordId,
            dateOfPurchase: this.dateOfPurchase,
            dateOfInstallation: this.dateOfInstallation,
            salesProductCode: this.salesProductCode,
            invoiceNumber: this.invoiceNumber,
            warrantyStartDate: this.warrantyStartDate,
            warrantyEndDate: this.warrantyEndDate,
            sourceOfPurchase: this.sourceOfPurchase,
            remarks: this.remarks,
            rentalAsset: this.rentalAsset,
            productId: this.productId,
            serialCode: this.serialCode,
            itemCode: this.itemCode
        })
            .then(() => {
                this.showSuccessToast('Product details saved successfully');
                this.showProductDetails = false;
            })
            .catch(error => this.showToast('Error', error.body.message, 'error'))
            .finally(() => this.isLoading = false);
    }

    handleTransferClick() {
        this.isLoading = true;
        transferAsset({ recordID: this.recordId, previousAssetId: this.previousAssetId, accountId: this.previousAccount })
            .then(result => {
                this.showToast('Success', result, 'success');
            })
            .catch(error => this.showToast('Error', error.body.message, 'error'))
            .finally(() => this.isLoading = false);
    }

    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(event);
    }

    showSuccessToast(message) {
        this.showToast('Success', message, 'success');
    }
}
